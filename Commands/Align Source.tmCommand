<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -W0
# Alignes the source 
def align(text, regexp_hash, width)
  text.to_a.map do |line|
    if offset = offsetOfRegexpInLine(line, regexp_hash['regexp'])
      if shouldInsertBefore(line, regexp_hash)
        before = line[0..offset-1]
        before + ' ' * (width - (before.length)) + line[offset..line.length-1]
      else
        before = line[0..offset]
        before + ' ' * (width - (before.length-1)) + line[offset+1..line.length-1]
      end
    else 
      line
    end
  end.join
end

# Figures out if the spacing should be added before or after the match. 
# This is chosen by the bundle developer by using the regexp options 'a'
# or 'b' where a is after and b is before
def shouldInsertBefore(line, regexp_hash)
  !(regexp_hash['spacing'] == "a")
end

# Finds the width of the line with the most text before the regexp.
def width(text, regexp)
  text.split("\n").collect { |line| offsetOfRegexpInLine(line,regexp) }.max
end

# The offset of a regexp in a line of text. -1 if it doesn't match
def offsetOfRegexpInLine(line, regexp) 
  if match = regexp.match(line) 
    match.offset(match.size &gt; 1 ? 1 : 0)[0] 
  else 
    -1 
  end
end

# Checks that the regexp matches every line 
def hasMatchForAll(text, regexp)
  text.to_a.select { |x| not x =~ /^\s*$/}.all? { |line| line =~ regexp }
end

def left_spacing(line)
  line.chars.take_while { |char| char =~ /\s/ }.join
end

# squeeces all whitspace in the line (preserves the left spacing)
def trim_all_whitespace(text) 
  text.to_a.map do |line| 
    left_spacing(line) + line.squeeze(" ").squeeze("	").lstrip #the 2. is a tab
  end.join
end

# finds the minimum offset of the capture of a regexp across all lines in a text.
def minOffsetOfRegexp(text,regexp_hash)
  min_offset = text.split("\n").collect { |line| offsetOfRegexpInLine(line,regexp_hash['regexp']) }.min
  { "min_offset" =&gt; min_offset, "regexp_hash" =&gt; regexp_hash }
end

# sorts and filters the regular expressions so the ones with the captures with the 
# lowest offset comes first. The ones that aren't matched or doesn't need alignment 
# are filtered out
def prioritizeRegexps(text, regexps_hash)
  regexps_hash.
    select  { |rh|    hasMatchForAll(text, rh['regexp']) }.
    collect { |rh|    minOffsetOfRegexp(text, rh) }.
    select  { |d|     not d['min_offset'].nil? }.
    sort    { |d1,d2| d1['min_offset'] &lt;=&gt; d2['min_offset'] }.
    select  { |d|     d['min_offset'] &gt; 0 }.
    collect { |d|     d['regexp_hash'] }
end

# Finds blocks of code to align. It uses the following heuristics:
#
#   - A line belongs to the previous block if it has the same indentation
#   - A blank line ends a block 
#
# returns an array of dictionaries with the keys 'block', 'from', 'to' that 
# expresses which lines the block spans. 
def find_blocks(text)
  lines = text.to_a

  initial = {
    'prev'   =&gt; lines[0],
    'blocks' =&gt; [{
      'lines' =&gt; [],
      'from'  =&gt; 0,
      'to'    =&gt; 0
    }]
  }

  text.to_a.reduce(initial) do |reduced, line|
    blocks = reduced['blocks']
    if left_spacing(line) == left_spacing(reduced['prev']) 
      blocks[blocks.size-1]['lines'] &lt;&lt; line
      blocks[blocks.size-1]['to']  = blocks[blocks.size-1]['to'] + 1
      { 'prev' =&gt; line, 'blocks' =&gt; blocks}
    else
      blocks &lt;&lt; {
        'lines' =&gt; [line],
        'from'  =&gt; blocks[blocks.size-1]['to'],
        'to'    =&gt; blocks[blocks.size-1]['to'] + 1
      }
      { 'prev' =&gt; line, 'blocks' =&gt; blocks}
    end
  end['blocks']
end

# Formats a single block. 
def format_block(block_dict, regexps_hash)
  text = trim_all_whitespace(block_dict['lines'].join)
  prioritizeRegexps(text, regexps_hash).each do |regexp_hash| 
    text = align(text, regexp_hash, width(text, regexp_hash['regexp']))
  end
  text 
end

# Formats every block in the text 
def format_all(text, regexps_hash)
  text = trim_all_whitespace(text)
  find_blocks(text).
    map  { |block| format_block(block, regexps_hash) }.
    each { |txt|   print txt }
end

# Formats the source in the block that goins the given line. All other blocks
# are just printet w/o formatting. 
def format_block_containing_line(text, line_number, regexps_hash)
  find_blocks(text).each do |block_dict|
    if block_dict['from'] &lt;= line_number &amp;&amp; block_dict['to'] &gt;= line_number
      print format_block(block_dict, regexps_hash)
    else
      print block_dict['lines'].join
    end
  end
end

=begin
  Great, lets get to the formatting then.
=end
fallback_regexps = ["/(,)(?!$)/","/\}/","/&lt;-/","/\s[-+\/*|]?(=)\s/","/\s(=&gt;)\s/","/:/","/\/\//"].join('ø')

regexps_hash = (ENV['TM_SOURCE_ALIGNMENT_PATTERN'] || fallback_regexps).
            split('ø').
            map do |r| 
              md = r.match("/(.*)/(.*)")
              { "regexp"  =&gt; Regexp.new(md[1]),
                "spacing" =&gt; md[2] }
            end
text    = STDIN.readlines().join()

if ENV['TM_SELECTED_TEXT'].nil?
  format_block_containing_line(text, ENV['TM_LINE_NUMBER'].to_i - 1, regexps_hash)
else
  format_all(text, regexps_hash)
end</string>
	<key>fallbackInput</key>
	<string>scope</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^@9</string>
	<key>name</key>
	<string>Align Source</string>
	<key>output</key>
	<string>replaceSelectedText</string>
	<key>uuid</key>
	<string>08636A01-94A8-4050-8A31-343E5BD187CF</string>
</dict>
</plist>
